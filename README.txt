This project is a comprehensive benchmark suite for various sorting algorithms, written in TypeScript. It's designed to measure and visualize the performance of different algorithms across a variety of data scenarios (e.g., random, sorted, nearly sorted arrays).

This project serves as a practical demonstration of data structures, algorithms, and software testing principles in a modern TypeScript environment. It highlights best practices like separation of concerns, configuration-driven development, and test automation.

## Key Features

-   **Performance Benchmarking:** Measures the execution time of multiple sorting algorithms across various array sizes and data patterns.
-   **Correctness Testing:** Uses Jest to verify that each algorithm produces a correctly sorted output and does not mutate the input array.
-   **Dynamic Configuration:** Easily add or remove algorithms and test scenarios by editing simple configuration files, without touching the core logic.
-   **Visual Analysis:** Generates an interactive HTML report with charts to visualize and compare the performance results.

## Prerequisites

Before you begin, ensure you have the following installed on your system:
*   [Node.js](https://nodejs.org/en/) (v16 or later recommended)
*   npm (which is included with Node.js)

## Setup and Installation

Follow these steps to get the project up and running on your local machine.

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/WillTHomeGit/sortingAlgorithms
    ```

2.  **Navigate to the project directory:**
    ```bash
    cd sortingalgorithms
    ```

3.  **Install the dependencies:**
    This command will read the `package.json` file and install all the necessary libraries, such as Jest and ts-node.
    ```bash
    npm install
    ```

## How to Run the Project

The project is controlled via npm scripts defined in `package.json`.

### Recommended Workflow

The intended workflow is to first run the benchmark to generate the data, and then run the plot generator to visualize it.

1.  `npm run benchmark`
2.  `npm run plot`

### Available Scripts

#### OPTIONAL
This command runs the Jest test suite to verify that each algorithm sorts correctly and adheres to the project's immutability requirements.
```bash
npm run test
```

#### 1. Run the Performance Benchmark
This command executes the main performance test. It will run all configured algorithms against all scenarios and generate a raw data file at `reports/performance-results.json`.
```bash
npm run benchmark```


#### 2. Generate the Visual Report
After running the benchmark, use this command to generate an interactive HTML report. It reads `reports/performance-results.json` and creates a viewable file at `reports/benchmark_plot.html`.
```bash
npm run plot
```
You can open `reports/benchmark_plot.html` in your web browser to see the charts.

#### ALTERNATIVE

You can also run the benchmark through the following:

npm run build

node dist/runners/performance-tester.js

---

## How It Works: Project Architecture

This project is designed with a strong **separation of concerns**, making it easy to maintain and extend.

1.  **Configuration (`src/config/`)**: This is the "control panel" of the suite.
    -   `algorithms.config.ts`: A master list of all sorting algorithms to be tested.
    -   `test-scenarios.config.ts`: Defines all the different types of arrays to test against (random, sorted, etc.).

2.  **Execution (`src/runners/`)**: These are the main scripts that perform the work.
    -   `performance-tester.ts`: Imports the configurations, loops through every algorithm and scenario, measures performance, and writes the results to a JSON file.
    -   `correctness.test.ts`: A Jest test file that also imports the configurations to dynamically create a test case for every algorithm and scenario.

3.  **Analysis (`src/analysis/`)**: This is the presentation layer.
    -   `plotGenerator.ts`: A standalone script that reads the JSON data generated by the performance runner and creates a user-friendly HTML report with charts.

This decoupled architecture means the `plotGenerator` doesn't need to know how the benchmark was run; it only needs the final data file.

## How to Add a New Algorithm

The project is designed to make adding new algorithms simple.

1.  **Create the Algorithm File:**
    -   Create a new file in `src/algorithms/`, for example, `myNewSort.ts`.
    -   Write and export your sorting function from this file. It must take an array of numbers and return a new, sorted array.

2.  **Export from the Barrel File:**
    -   Open `src/algorithms/index.ts` and add a new export line: `export * from './myNewSort';`

3.  **Add to the Configuration:**
    -   Open `src/config/algorithms.config.ts`.
    -   Import your new algorithm.
    -   Add a new object to the `ALGORITHMS_TO_TEST` array:
        ```typescript
        {
          name: 'My New Sort',
          fn: algorithms.myNewSort
        }
        ```

That's it! The performance and correctness runners will automatically pick up your new algorithm the next time they are run.